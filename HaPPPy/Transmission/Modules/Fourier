#Def an command FT that calculates the discret fouriertransformation of an 
#function 'function' that is given on discret sampling points called 
#'arguments' (as well as the retransformation IFT). The result is a list of 
#complex numbers called'kFunction' ('xfunction) with a list of new samplepoints
#called 'new arguments'.
#ATTENTION!: the so called transformationmatrices TM and ITM are  matrices that
#perform a fourier transform (retransfomation) mod a normalizationfactor.
#This factor is recognised by the FT and IFT command.

import numpy
import cmath

def function(x):
    
    f = numpy.sin(x)+numpy.cos(2*x)
    
    return f

#inverse transformationmatrixelement
def ITMElement(arg,newArg):
    
    element = cmath.exp(1j*newArg*arg)/numpy.sqrt(N)
    
    return element

#FT transform to new arguments
def FT(xFunction):
    
    kFunction = L*numpy.dot(TM,xFunction)/numpy.sqrt(2*numpy.pi*N)
    
    return kFunction

#IFT:retransform to arguments
def IFT(kFunction):
    
    xFunction = numpy.sqrt(2*numpy.pi*N)*numpy.dot(ITM,kFunction)/L
    
    return xFunction

########Constants and Parameters
x0 = -2 #lowest argument
L =  4#Range of arguments

N =  3 #Number of Arguments, needs to be odd for centering k's around 0


dx = L/N
#print(dx)
dk = 2*cmath.pi/L
k0 =  -(N-1)/2*dk #lowest new arguments so that k's centred around k = 0
##########

#create transformationMatrices
indices = numpy.arange(0, N, 1) # indices of transformation matrices

#print(indices)

arguments = numpy.array(numpy.arange(x0, x0 + L, dx)) #samplepoints of the function

#print(arguments)

newArguments = numpy.array(numpy.arange(k0,k0+N*dk, dk))
#print(newArguments)

ITM = numpy.zeros((N,N), dtype=numpy.complex64) #InverseTransformationMatrix
#print(matrix)

for n in indices: #rowindeces
    for m in indices: #columindices
        ITM[n][m] = ITMElement(arguments[n],newArguments[m])
#print(IFTM)

TM = numpy.transpose(ITM.conjugate()) #transformationsmatrix
#print(FTM)


##### Function that should be transformed
xfunction = numpy.array([function(x) for x in arguments])
####
